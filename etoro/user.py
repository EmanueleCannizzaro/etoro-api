# coding: utf-8

"""
    User

    The User API provides data on a user including trading statistics  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from etoro_user.api_client import ApiClient
from etoro_user.configuration import Configuration
import etoro_user.models
from etoro_user import rest



class User_Configuration(Configuration):
    def __init__(self):
        self.host = "https://api.etoro.com/API/User/V1"

        self.logger["package_logger"] = logging.getLogger("etoro_user")


class User_ApiClient(ApiClient):


class User_DefaultApi(DefaultApi):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_aggregates_history(self, username, **kwargs):  # noqa: E501
        """Trade/History/Aggregates  # noqa: E501

        The trading history aggregates retrieves aggregate data on the trading of a customer  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aggregates_history(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The username which we want to get the aggregate data on (required)
        :param str period: The name of the period which we would like to get aggregate data on. The possible values are according to the period name in the metadata <a href=\"docs/services/5784e8446361c811ccfdf536/operations/578501516361c811ccfdf53c\">StatsPeriods API</a>
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_aggregates_history_with_http_info(username, **kwargs)  # noqa: E501
        else:
            (data) = self.get_aggregates_history_with_http_info(username, **kwargs)  # noqa: E501
            return data

    def get_aggregates_history_with_http_info(self, username, **kwargs):  # noqa: E501
        """Trade/History/Aggregates  # noqa: E501

        The trading history aggregates retrieves aggregate data on the trading of a customer  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aggregates_history_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The username which we want to get the aggregate data on (required)
        :param str period: The name of the period which we would like to get aggregate data on. The possible values are according to the period name in the metadata <a href=\"docs/services/5784e8446361c811ccfdf536/operations/578501516361c811ccfdf53c\">StatsPeriods API</a>
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username', 'period']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_aggregates_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in params or
                params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `get_aggregates_history`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in params:
            path_params['Username'] = params['username']  # noqa: E501

        query_params = []
        if 'period' in params:
            query_params.append(('Period', params['period']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/{Username}/Trade/History/Aggregates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_copiers_history(self, username, **kwargs):  # noqa: E501
        """Copiers/History  # noqa: E501

        The API returns the daily number of copiers of a user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_copiers_history(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The username which I would like to get the copier history (required)
        :param str min_date: The minimum date for the response. The date should be formatted as YYYY/MM/DD
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_copiers_history_with_http_info(username, **kwargs)  # noqa: E501
        else:
            (data) = self.get_copiers_history_with_http_info(username, **kwargs)  # noqa: E501
            return data

    def get_copiers_history_with_http_info(self, username, **kwargs):  # noqa: E501
        """Copiers/History  # noqa: E501

        The API returns the daily number of copiers of a user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_copiers_history_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The username which I would like to get the copier history (required)
        :param str min_date: The minimum date for the response. The date should be formatted as YYYY/MM/DD
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username', 'min_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_copiers_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in params or
                params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `get_copiers_history`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in params:
            path_params['Username'] = params['username']  # noqa: E501

        query_params = []
        if 'min_date' in params:
            query_params.append(('MinDate', params['min_date']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/{Username}/Copiers/History', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_copy_simulation_data(self, username, period, **kwargs):  # noqa: E501
        """CopySimulation  # noqa: E501

        The copy simulation retrieves periodic copy simulation data including daily equity and optional daily asset allocation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_copy_simulation_data(username, period, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The username to simulate (required)
        :param str period: The name of the period which we would like to get simulation data on. The possible values are according to the period name in the metadata <a href=\"docs/services/5784e8446361c811ccfdf536/operations/578501516361c811ccfdf53c\">StatsPeriods API</a> (required)
        :param bool asset_allocation: Return information on daily asset allocation
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_copy_simulation_data_with_http_info(username, period, **kwargs)  # noqa: E501
        else:
            (data) = self.get_copy_simulation_data_with_http_info(username, period, **kwargs)  # noqa: E501
            return data

    def get_copy_simulation_data_with_http_info(self, username, period, **kwargs):  # noqa: E501
        """CopySimulation  # noqa: E501

        The copy simulation retrieves periodic copy simulation data including daily equity and optional daily asset allocation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_copy_simulation_data_with_http_info(username, period, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The username to simulate (required)
        :param str period: The name of the period which we would like to get simulation data on. The possible values are according to the period name in the metadata <a href=\"docs/services/5784e8446361c811ccfdf536/operations/578501516361c811ccfdf53c\">StatsPeriods API</a> (required)
        :param bool asset_allocation: Return information on daily asset allocation
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username', 'period', 'asset_allocation']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_copy_simulation_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in params or
                params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `get_copy_simulation_data`")  # noqa: E501
        # verify the required parameter 'period' is set
        if ('period' not in params or
                params['period'] is None):
            raise ValueError("Missing the required parameter `period` when calling `get_copy_simulation_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in params:
            path_params['Username'] = params['username']  # noqa: E501

        query_params = []
        if 'period' in params:
            query_params.append(('Period', params['period']))  # noqa: E501
        if 'asset_allocation' in params:
            query_params.append(('AssetAllocation', params['asset_allocation']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/{Username}/CopySimulation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_daily_gain(self, username, type, min_date, max_date, **kwargs):  # noqa: E501
        """Daily Gain  # noqa: E501

        The Daily Gain API provides daily gains of users either as a time series or an aggregation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_daily_gain(username, type, min_date, max_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The username which we would like to get the gain information (required)
        :param str type: Type of data returned (required)
        :param str min_date: The minimum date of the query. The date should be formatted as YYYY-MM-DD (required)
        :param str max_date: The maximum date of the query. The date should be formatted as YYYY-MM-DD (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_daily_gain_with_http_info(username, type, min_date, max_date, **kwargs)  # noqa: E501
        else:
            (data) = self.get_daily_gain_with_http_info(username, type, min_date, max_date, **kwargs)  # noqa: E501
            return data

    def get_daily_gain_with_http_info(self, username, type, min_date, max_date, **kwargs):  # noqa: E501
        """Daily Gain  # noqa: E501

        The Daily Gain API provides daily gains of users either as a time series or an aggregation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_daily_gain_with_http_info(username, type, min_date, max_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The username which we would like to get the gain information (required)
        :param str type: Type of data returned (required)
        :param str min_date: The minimum date of the query. The date should be formatted as YYYY-MM-DD (required)
        :param str max_date: The maximum date of the query. The date should be formatted as YYYY-MM-DD (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username', 'type', 'min_date', 'max_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_daily_gain" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in params or
                params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `get_daily_gain`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_daily_gain`")  # noqa: E501
        # verify the required parameter 'min_date' is set
        if ('min_date' not in params or
                params['min_date'] is None):
            raise ValueError("Missing the required parameter `min_date` when calling `get_daily_gain`")  # noqa: E501
        # verify the required parameter 'max_date' is set
        if ('max_date' not in params or
                params['max_date'] is None):
            raise ValueError("Missing the required parameter `max_date` when calling `get_daily_gain`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in params:
            path_params['Username'] = params['username']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('Type', params['type']))  # noqa: E501
        if 'min_date' in params:
            query_params.append(('MinDate', params['min_date']))  # noqa: E501
        if 'max_date' in params:
            query_params.append(('MaxDate', params['max_date']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/{Username}/DailyGain', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_gains(self, username, **kwargs):  # noqa: E501
        """Monthly Gain  # noqa: E501

        This API retrieves the monthly and yearly gains of a user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_gains(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The username which we would like to get the gain information (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_gains_with_http_info(username, **kwargs)  # noqa: E501
        else:
            (data) = self.get_gains_with_http_info(username, **kwargs)  # noqa: E501
            return data

    def get_gains_with_http_info(self, username, **kwargs):  # noqa: E501
        """Monthly Gain  # noqa: E501

        This API retrieves the monthly and yearly gains of a user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_gains_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The username which we would like to get the gain information (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_gains" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in params or
                params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `get_gains`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in params:
            path_params['Username'] = params['username']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/{Username}/Gain', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_live_copiers(self, username, **kwargs):  # noqa: E501
        """Copiers/Live  # noqa: E501

        This API returns the number of live copiers by country  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_live_copiers(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The username which we are trying to get the copiers (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_live_copiers_with_http_info(username, **kwargs)  # noqa: E501
        else:
            (data) = self.get_live_copiers_with_http_info(username, **kwargs)  # noqa: E501
            return data

    def get_live_copiers_with_http_info(self, username, **kwargs):  # noqa: E501
        """Copiers/Live  # noqa: E501

        This API returns the number of live copiers by country  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_live_copiers_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The username which we are trying to get the copiers (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_live_copiers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in params or
                params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `get_live_copiers`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in params:
            path_params['Username'] = params['username']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/{Username}/Copiers/Live', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_live_risk_score(self, username, **kwargs):  # noqa: E501
        """RiskScore/Live  # noqa: E501

        The Risk Score Live API call returns data on the live customer risk score  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_live_risk_score(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The username which we would like to get the risk score information (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_live_risk_score_with_http_info(username, **kwargs)  # noqa: E501
        else:
            (data) = self.get_live_risk_score_with_http_info(username, **kwargs)  # noqa: E501
            return data

    def get_live_risk_score_with_http_info(self, username, **kwargs):  # noqa: E501
        """RiskScore/Live  # noqa: E501

        The Risk Score Live API call returns data on the live customer risk score  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_live_risk_score_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The username which we would like to get the risk score information (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_live_risk_score" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in params or
                params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `get_live_risk_score`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in params:
            path_params['Username'] = params['username']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/{Username}/RiskScore/Live/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_risk_history(self, username, **kwargs):  # noqa: E501
        """RiskScore/History  # noqa: E501

        This API retrieves the historical risk score of a customer  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_risk_history(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The username which we would like to get the risk score information (required)
        :param str min_date: The minimum date to return information
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_risk_history_with_http_info(username, **kwargs)  # noqa: E501
        else:
            (data) = self.get_risk_history_with_http_info(username, **kwargs)  # noqa: E501
            return data

    def get_risk_history_with_http_info(self, username, **kwargs):  # noqa: E501
        """RiskScore/History  # noqa: E501

        This API retrieves the historical risk score of a customer  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_risk_history_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The username which we would like to get the risk score information (required)
        :param str min_date: The minimum date to return information
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username', 'min_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_risk_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in params or
                params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `get_risk_history`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in params:
            path_params['Username'] = params['username']  # noqa: E501

        query_params = []
        if 'min_date' in params:
            query_params.append(('MinDate', params['min_date']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/{Username}/RiskScore/History', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_discovery_data(self, username, **kwargs):  # noqa: E501
        """Discovery  # noqa: E501

        The API returns discovery values for a specific user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_discovery_data(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: (required)
        :param str period: Requested Period
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_discovery_data_with_http_info(username, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_discovery_data_with_http_info(username, **kwargs)  # noqa: E501
            return data

    def get_user_discovery_data_with_http_info(self, username, **kwargs):  # noqa: E501
        """Discovery  # noqa: E501

        The API returns discovery values for a specific user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_discovery_data_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: (required)
        :param str period: Requested Period
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username', 'period']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_discovery_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in params or
                params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `get_user_discovery_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in params:
            path_params['Username'] = params['username']  # noqa: E501

        query_params = []
        if 'period' in params:
            query_params.append(('Period', params['period']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/{Username}/Discovery', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_followers(self, username, **kwargs):  # noqa: E501
        """Social/Followers  # noqa: E501

        The API returns the number of followers of a user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_followers(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The username which we want to query (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_followers_with_http_info(username, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_followers_with_http_info(username, **kwargs)  # noqa: E501
            return data

    def get_user_followers_with_http_info(self, username, **kwargs):  # noqa: E501
        """Social/Followers  # noqa: E501

        The API returns the number of followers of a user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_followers_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The username which we want to query (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_followers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in params or
                params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `get_user_followers`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in params:
            path_params['Username'] = params['username']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/{Username}/Social/Followers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_info(self, username, **kwargs):  # noqa: E501
        """Info  # noqa: E501

        This API returns general information on a user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_info(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The username which we would like to get the information (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_info_with_http_info(username, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_info_with_http_info(username, **kwargs)  # noqa: E501
            return data

    def get_user_info_with_http_info(self, username, **kwargs):  # noqa: E501
        """Info  # noqa: E501

        This API returns general information on a user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_info_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The username which we would like to get the information (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in params or
                params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `get_user_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in params:
            path_params['Username'] = params['username']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/{Username}/Info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_portfolio_summary(self, username, **kwargs):  # noqa: E501
        """PortfolioSummary  # noqa: E501

        The portfolio summary aggregates the live portfolio of a user by manually traded assets and all the social trades he has open  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_portfolio_summary(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The requested username (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_portfolio_summary_with_http_info(username, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_portfolio_summary_with_http_info(username, **kwargs)  # noqa: E501
            return data

    def get_user_portfolio_summary_with_http_info(self, username, **kwargs):  # noqa: E501
        """PortfolioSummary  # noqa: E501

        The portfolio summary aggregates the live portfolio of a user by manually traded assets and all the social trades he has open  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_portfolio_summary_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The requested username (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_portfolio_summary" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in params or
                params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `get_user_portfolio_summary`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in params:
            path_params['Username'] = params['username']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/{Username}/PortfolioSummary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_visual_portfolio(self, username, top, **kwargs):  # noqa: E501
        """VisualPortfolio  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_visual_portfolio(username, top, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The requested username (required)
        :param float top: The number of results to return (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_visual_portfolio_with_http_info(username, top, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_visual_portfolio_with_http_info(username, top, **kwargs)  # noqa: E501
            return data

    def get_user_visual_portfolio_with_http_info(self, username, top, **kwargs):  # noqa: E501
        """VisualPortfolio  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_visual_portfolio_with_http_info(username, top, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str username: The requested username (required)
        :param float top: The number of results to return (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_visual_portfolio" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in params or
                params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `get_user_visual_portfolio`")  # noqa: E501
        # verify the required parameter 'top' is set
        if ('top' not in params or
                params['top'] is None):
            raise ValueError("Missing the required parameter `top` when calling `get_user_visual_portfolio`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in params:
            path_params['Username'] = params['username']  # noqa: E501

        query_params = []
        if 'top' in params:
            query_params.append(('Top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/{Username}/VisualPortfolio', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_users_discovery_data(self, usernames, period, **kwargs):  # noqa: E501
        """Multiple Discovery  # noqa: E501

        This API returns discovery values for multiple users  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_users_discovery_data(usernames, period, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str usernames: A comma delimited list of usernames which I would like to get discovery data (required)
        :param str period: Requested Period (required)
        :param str fields: A comma delimited list of fields which should be returned
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_users_discovery_data_with_http_info(usernames, period, **kwargs)  # noqa: E501
        else:
            (data) = self.get_users_discovery_data_with_http_info(usernames, period, **kwargs)  # noqa: E501
            return data

    def get_users_discovery_data_with_http_info(self, usernames, period, **kwargs):  # noqa: E501
        """Multiple Discovery  # noqa: E501

        This API returns discovery values for multiple users  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_users_discovery_data_with_http_info(usernames, period, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str usernames: A comma delimited list of usernames which I would like to get discovery data (required)
        :param str period: Requested Period (required)
        :param str fields: A comma delimited list of fields which should be returned
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['usernames', 'period', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_users_discovery_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'usernames' is set
        if ('usernames' not in params or
                params['usernames'] is None):
            raise ValueError("Missing the required parameter `usernames` when calling `get_users_discovery_data`")  # noqa: E501
        # verify the required parameter 'period' is set
        if ('period' not in params or
                params['period'] is None):
            raise ValueError("Missing the required parameter `period` when calling `get_users_discovery_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'usernames' in params:
            query_params.append(('Usernames', params['usernames']))  # noqa: E501
        if 'period' in params:
            query_params.append(('Period', params['period']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('Fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/Multiple/Discovery', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_users_info(self, **kwargs):  # noqa: E501
        """Multiple Info  # noqa: E501

        This API returns general information on a list of users  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_users_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_names: A comma delimited list of usernames
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_users_info_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_users_info_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_users_info_with_http_info(self, **kwargs):  # noqa: E501
        """Multiple Info  # noqa: E501

        This API returns general information on a list of users  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_users_info_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_names: A comma delimited list of usernames
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_names']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_users_info" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_names' in params:
            query_params.append(('UserNames', params['user_names']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/Multiple/Info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_users_visual_portfolio(self, **kwargs):  # noqa: E501
        """Multiple Visual Portfolio  # noqa: E501

        This API returns the visual portfolio on a list of users  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_users_visual_portfolio(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_names: A comma delimited list of usernames
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_users_visual_portfolio_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_users_visual_portfolio_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_users_visual_portfolio_with_http_info(self, **kwargs):  # noqa: E501
        """Multiple Visual Portfolio  # noqa: E501

        This API returns the visual portfolio on a list of users  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_users_visual_portfolio_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_names: A comma delimited list of usernames
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_names']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_users_visual_portfolio" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_names' in params:
            query_params.append(('UserNames', params['user_names']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/Multiple/VisualPortfolio', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

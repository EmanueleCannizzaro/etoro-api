# coding: utf-8

"""
    eToro Discovery API

    The discovery API allows you to discover customers in the eToro network. It is important to note that only customers who have opted-in for discovery will be shown by this API  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from etoro_discovery.api_client import ApiClient


class Discovery_Configuration(Configuration):
    def __init__(self):
        self.host = "https://api.etoro.com/Discover/V1"
        self.logger["package_logger"] = logging.getLogger("etoro_discovery")
		
		
class DefaultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_metadata(self, **kwargs):  # noqa: E501
        """MetaData  # noqa: E501

        The discovery metadata API returns the values which can be queried  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_metadata(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_metadata_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_metadata_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_metadata_with_http_info(self, **kwargs):  # noqa: E501
        """MetaData  # noqa: E501

        The discovery metadata API returns the values which can be queried  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_metadata_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_metadata" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/MetaData', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_search(self, period, **kwargs):  # noqa: E501
        """Search  # noqa: E501

        The search API allows you to filter customers according to periodic aggregate data. For a full explanation on the mechanics of filtering, ordering and paging, see <a href=\"/discovery-filtering\">this blog post</a>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_search(period, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str period: The requested period (required)
        :param float page: The requested page number. Defaults to 1
        :param float page_size: The requested page size
        :param str sort: The requested sort. Sorting may be applied to multiple columns. For descending order a '-' prefix should be used.
        :param str fields: A comma delimited list of fields which should be returned
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_search_with_http_info(period, **kwargs)  # noqa: E501
        else:
            (data) = self.get_search_with_http_info(period, **kwargs)  # noqa: E501
            return data

    def get_search_with_http_info(self, period, **kwargs):  # noqa: E501
        """Search  # noqa: E501

        The search API allows you to filter customers according to periodic aggregate data. For a full explanation on the mechanics of filtering, ordering and paging, see <a href=\"/discovery-filtering\">this blog post</a>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_search_with_http_info(period, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str period: The requested period (required)
        :param float page: The requested page number. Defaults to 1
        :param float page_size: The requested page size
        :param str sort: The requested sort. Sorting may be applied to multiple columns. For descending order a '-' prefix should be used.
        :param str fields: A comma delimited list of fields which should be returned
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['period', 'page', 'page_size', 'sort', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_search" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'period' is set
        if ('period' not in params or
                params['period'] is None):
            raise ValueError("Missing the required parameter `period` when calling `get_search`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'period' in params:
            query_params.append(('Period', params['period']))  # noqa: E501
        if 'page' in params:
            query_params.append(('Page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('PageSize', params['page_size']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('Sort', params['sort']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('Fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/Search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

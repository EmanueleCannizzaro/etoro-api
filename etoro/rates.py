# coding: utf-8

"""
    eToro Rates API

    The Rates API provides eToro live and historical rates  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from etoro_rates.api_client import ApiClient



class Configuration(six.with_metaclass(TypeWithDefault, object)):
    def __init__(self):
        self.host = "https://api.etoro.com/"


from etoro_rates.configuration import Configuration
import etoro_rates.models
from etoro_rates import rest


class ApiClient(object):


    def __deserialize(self, data, klass):

                etoro_rates.models


class DefaultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_candles(self, candle_period_id, instrument_id, **kwargs):  # noqa: E501
        """History/Candles  # noqa: E501

        <br>The History Candles API retrieves historical candles per instrument  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_candles(candle_period_id, instrument_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float candle_period_id: The internal ID of the candle interval. For the full values see the metadata <a href=\"/docs/services/5784e8446361c811ccfdf536/operations/5785c91b6361c80d884cfce9\">Candle Periods API</a> (required)
        :param float instrument_id: The instrument ID which we want to retrieve the candles. For the full list of instruments see the metadata <a href=\"/docs/services/5784e8446361c811ccfdf536/operations/5784f6ee6361c811ccfdf53b\">Instruments API</a> (required)
        :param float top: The number of candles to return. If omitted we will return 100 candles
        :param str order: The order of the candles returned. If omitted it will be returned in a descending order
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_candles_with_http_info(candle_period_id, instrument_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_candles_with_http_info(candle_period_id, instrument_id, **kwargs)  # noqa: E501
            return data

    def get_candles_with_http_info(self, candle_period_id, instrument_id, **kwargs):  # noqa: E501
        """History/Candles  # noqa: E501

        <br>The History Candles API retrieves historical candles per instrument  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_candles_with_http_info(candle_period_id, instrument_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float candle_period_id: The internal ID of the candle interval. For the full values see the metadata <a href=\"/docs/services/5784e8446361c811ccfdf536/operations/5785c91b6361c80d884cfce9\">Candle Periods API</a> (required)
        :param float instrument_id: The instrument ID which we want to retrieve the candles. For the full list of instruments see the metadata <a href=\"/docs/services/5784e8446361c811ccfdf536/operations/5784f6ee6361c811ccfdf53b\">Instruments API</a> (required)
        :param float top: The number of candles to return. If omitted we will return 100 candles
        :param str order: The order of the candles returned. If omitted it will be returned in a descending order
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['candle_period_id', 'instrument_id', 'top', 'order']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_candles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'candle_period_id' is set
        if ('candle_period_id' not in params or
                params['candle_period_id'] is None):
            raise ValueError("Missing the required parameter `candle_period_id` when calling `get_candles`")  # noqa: E501
        # verify the required parameter 'instrument_id' is set
        if ('instrument_id' not in params or
                params['instrument_id'] is None):
            raise ValueError("Missing the required parameter `instrument_id` when calling `get_candles`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'candle_period_id' in params:
            query_params.append(('CandlePeriodId', params['candle_period_id']))  # noqa: E501
        if 'instrument_id' in params:
            query_params.append(('InstrumentID', params['instrument_id']))  # noqa: E501
        if 'top' in params:
            query_params.append(('Top', params['top']))  # noqa: E501
        if 'order' in params:
            query_params.append(('Order', params['order']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/History/Candles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_closing_rate(self, **kwargs):  # noqa: E501
        """History/ClosingRate  # noqa: E501

        <br>The Closing Rate API returns the closing rates on a daily, weekly and monthly basis.<br> <li><b>Daily</b> The daily closing rate is updated when daily trading starts. For instruments which are traded 24 hours, the end of day is 17:00 US Eastern Time</li> <li><b>Weekly</b> The weekly closing price is updated before the opening of the trading week on Sunday 21:00 UTC</li> <li><b>Monthly</b> The monthly closing price is updated on the 1st of each month </li> <br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_closing_rate(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instrument_ids: A comma delimited list of instrument ids. For the full list of instrument IDs refer to the <a href=\"/docs/services/5784e8446361c811ccfdf536/operations/5784f6ee6361c811ccfdf53b\">Instruments API</a>
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_closing_rate_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_closing_rate_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_closing_rate_with_http_info(self, **kwargs):  # noqa: E501
        """History/ClosingRate  # noqa: E501

        <br>The Closing Rate API returns the closing rates on a daily, weekly and monthly basis.<br> <li><b>Daily</b> The daily closing rate is updated when daily trading starts. For instruments which are traded 24 hours, the end of day is 17:00 US Eastern Time</li> <li><b>Weekly</b> The weekly closing price is updated before the opening of the trading week on Sunday 21:00 UTC</li> <li><b>Monthly</b> The monthly closing price is updated on the 1st of each month </li> <br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_closing_rate_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instrument_ids: A comma delimited list of instrument ids. For the full list of instrument IDs refer to the <a href=\"/docs/services/5784e8446361c811ccfdf536/operations/5784f6ee6361c811ccfdf53b\">Instruments API</a>
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instrument_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_closing_rate" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'instrument_ids' in params:
            query_params.append(('InstrumentIds', params['instrument_ids']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/History/ClosingRate', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_live_rates(self, **kwargs):  # noqa: E501
        """Live  # noqa: E501

        This API returns live rates  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_live_rates(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instrument_ids: A comma delimited list of instrument ids. For the full list of instrument IDs refer to the <a href=\"/docs/services/5784e8446361c811ccfdf536/operations/5784f6ee6361c811ccfdf53b\">Instruments API</a>
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_live_rates_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_live_rates_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_live_rates_with_http_info(self, **kwargs):  # noqa: E501
        """Live  # noqa: E501

        This API returns live rates  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_live_rates_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str instrument_ids: A comma delimited list of instrument ids. For the full list of instrument IDs refer to the <a href=\"/docs/services/5784e8446361c811ccfdf536/operations/5784f6ee6361c811ccfdf53b\">Instruments API</a>
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['instrument_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_live_rates" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'instrument_ids' in params:
            query_params.append(('InstrumentIds', params['instrument_ids']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyHeader', 'apiKeyQuery']  # noqa: E501

        return self.api_client.call_api(
            '/Live', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
